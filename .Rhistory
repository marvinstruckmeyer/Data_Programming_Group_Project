as.data.frame()
colnames(Daten_Alternatives_monatlich) <- c("Datum", Alternatives_Namen)
Daten_Alternatives_monatlich[,2:ncol(Daten_Alternatives_monatlich)] <- Daten_Alternatives_monatlich[,2:ncol(Daten_Alternatives_monatlich)] / 100
Daten_Alternatives_monatlich_Korrelationsmatrix <- Daten_Alternatives_monatlich[,-1] %>% na.omit() %>% cor()
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World', 'S&P 500', 'Nasdaq', 'MSCI EM',
'Euro Stoxx 50', 'Nikkei', 'Dax'),
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz'),
Daten_Alternatives_monatlich %>% select(Datum, 'EPRA/NAREIT Developed')
)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
head(Daten_Rohstoffe_monatlich)
str(Daten_Rohstoffe, 2)
str(Daten_Rohstoffe)
str(Daten_Rohstoffe_monatlich)
Daten_Rohstoffe_monatlich$Datum <- seq(as.Date("1984-07-01"), as.Date("2024-07-01"), by = "1 month")
Daten_Alternatives_monatlich %>% head(3)
Daten_Alternatives_monatlich$Datum <- seq(as.Date("1994-07-01"), as.Date("2024-07-01"), by = "1 month")
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World', 'S&P 500', 'Nasdaq', 'MSCI EM',
'Euro Stoxx 50', 'Nikkei', 'Dax'),
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz'),
Daten_Alternatives_monatlich %>% select(Datum, 'EPRA/NAREIT Developed')
)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
Daten_Multi_Asset %>% head(2)
Daten_Multi_Asset_monatlich %>% head(2)
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World', 'S&P 500', 'Nasdaq', 'MSCI EM',
'Euro Stoxx 50', 'Nikkei', 'Dax'),
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz')
)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
Daten_Multi_Asset_monatlich %>% head(2)
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World', ,
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz')
)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World'),
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz')
)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
Daten_Aktien_monatlich %>% head(2)
Daten_Multi_Asset_monatlich %>% head(2)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.6, 0.4)) %>% SharpeRatio.annualized()
Daten_Multi_Asset_monatlich[,c(2,3)] %>% head(2)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.6, 0.4), rebalance_on = "years") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% SharpeRatio.annualized()
eturn.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% table.Stats()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% table.Stats()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% annualReturn()
eturn.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% Return.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% Return.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% StdDev.annualized()
0.04268/0.08541
c
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% maxDrawdown()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4), rebalance_on = "years") %>% maxDrawdown()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "years") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Daten_Multi_Asset_monatlich[,c(2,3,12)] %>% head(2)
Daten_Multi_Asset_monatlich %>% head(2)
Daten_Aktien_monatlich %>% head(2)
Multi_Asset_Liste_monatlich <- list(
Daten_Aktien_monatlich %>% select(Datum, 'MSCI World', 'S&P 500'),
Daten_Anleihen_monatlich %>% select(Datum, 'FTSE World Government Bonds', 'USA 2-Year', 'USA 10-Year', 'USA 30-Year',
'DE 2-Year', 'DE 10-Year', 'DE 30-Year', 'SW 10-Year', 'JP 10-Year'),
Daten_Rohstoffe_monatlich %>% select(Datum, 'Gold Oz', 'Silver Oz')
)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Daten_Multi_Asset_monatlich %>% head(2)
Daten_Multi_Asset_monatlich <- reduce(Multi_Asset_Liste_monatlich, full_join, by = "Datum") %>% na.omit()
Daten_Multi_Asset_Korrelationsmatrix_monatlich <- Daten_Multi_Asset_monatlich[,-1] %>% na.omit() %>% cor()
Daten_Multi_Asset_monatlich %>% head(2)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(2,3,12)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% Return.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% StdDev.annualized()
5.7/9.4
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.5, 0.4, 0.1), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% SharpeRatio.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.6, 0.4), rebalance_on = "years") %>% chart.Drawdown()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% tail(36)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% tail(32)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% tail(31)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% tail(31) %>% head(12)
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4,13)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.55, 0.4, 0.05), rebalance_on = "quarters") %>% tail(31) %>% head(12) %>% Return.annualized()
Return.portfolio(xts(Daten_Multi_Asset_monatlich[,c(3,4)], order.by = Daten_Multi_Asset_monatlich$Datum), weights = c(0.6, 0.4), rebalance_on = "years") %>% tail(31) %>% head(12) %>% Return.annualized()
16/13
q()
library(magrittr)
library(PerformanceAnalytics)
data(edhec)
cor(edhec)
library(corrplot)
cor(edhec) %>% corrplot(method = "number")
cor(edhec) %>% corrplot(method = "color")
60/40
51/34
50/35
q()
q()
q()
Sys.getenv()
c
x
a <- 5
a + b
a <- -5
sqrt(a)
? sqrt()
library(ggplot2)
a
a %>% sqrt()
library(magrittr)
library(lubridate)
c(1, 2, 3, "A")
seq(1, 100, l = 9)
(y == 2) + 1
y <- c(1,2,3) # that's a vector
(y == 2) + 1
names[ages > 20]
names <- c("Pablo", "Andrea", "Maria", "Javi")
ages <- c(10, 43, 20, 24)
names[ages > 20]
ages[names == "Javi"]
which(ages == 24)
ages != 20
!(ages >= 20)
ages > 20 & ages < 24
ages > 20 & ages <= 24
ages > 20 | ages < 24
ages(order(ages))
ages
order(ages)
ages[order(ages)]
install.packages("microbenchmark")
library(microbenchmark)
microbenchmark(sort(ages), ages[order(ages)], times = 1e3)
1e3
1-e3
-1e3
order(c(1,2,4,0))
c <- c(1,2,3)
b <- c(4,5,6,7)
c + b
my_age <- 24
my_name <- "Marvin"
my_age != 60
my_age != "Ornitorrinco"
my_age == "Ornitorrinco"
siblings <- TRUE
birth_date <- as_date("2000-05-25")
my_surname <- "Struckmeyer"
full_name <- glue(my_name, my_surname)
library("tidyverse")
glue(my_name, my_surname)
install.packages("glue")
install.packages("glue")
library(glue)
glue(my_name, my_surname)
month(birth_date)
library(lubridate)
month(birth_date)
difftime(birth_date, Sys.Date())
Sys.Date()
today()
c(1:7) %>% mean()
library(magrittr)
c(1:7) %>% mean()
c(1;7) %>% median()
c(1:7) %>% median()
names_glue <- c("Javier", "Ferdi", "Sandra")
ages_glue <- c(20, 12, 34)
glue("The person named as {names_glue} is {ages_glue} years old")
paste("The person named as", names_glue, "is", ages_glue, "years old")
matrix(data = c(1:9), nrow = 3)
matrix(data = c(1:9), nrow = 3, byrow = T)
names_glue
ages_glue
cbind(names_glue, ages_glue)
library(magrittr)
rbind(names_glue, ages_glue)
rbind(names_glue, ages_glue) %>% t()
cbind(names_glue, ages_glue) %>% class(0)
cbind(names_glue, ages_glue) %>% class()
rbind(names_glue, ages_glue) %>% class()
names
glue
names
ages
df <- data.frame(names, ages)
df
df$names
df[1,]
df$names
df[,1]
df["names"]
`colnames<-`(df)
colnames(df)
names(df)
df[5,] <- NA
df
df
df <- data.frame(names, ages)
df
df$names
df[,1]
df["names"]
names(df) # or colnames(df)
df
rbind(df, c("Juan", 25))
data.frame(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85))
data.frame(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / height)
library(tibble)
data.frame(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / (height^2))
data.frame(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85))
data.frame("weight" = c(60, 70, 80), "height" = c(1.65, 1.75, 1.85))
tibble(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / (height^2))
tibble(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / (height^2))
tibble("weight" = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / (height^2))
tb <- tibble(weight = c(60, 70, 80), height = c(1.65, 1.75, 1.85), BMI = weight / (height^2))
tb
tb %>% class()
tb$weight
tb$weight %>% class()
View(tb)
View(tb)
View(tb)
iris
iris %>% head()
iris %>% as_tibble()
library(dplyr)
starwars
print(n = 12)
View(starwars)
library(datasets)
load(airquality)
airquality %>% head()
airquality %>% class()
airquality_df <- as_tbl(airquality)
airquality_df <- as_tibble(airquality)
airquality_tb <- as_tibble(airquality)
airquality_tb %>% names()
airquality_tb %>% colnames()
airquality_tb %>% rownnames()
airquality_tb %>% rownames()
airquality_tb %>% nrow()
airquality_tb %>% tail()
airquality_db %>% dim()
airquality_tb %>% dim()
airquality_tb %>% View()
airquality_tb %>% View()
airquality_tb[5,]
airquality_tb[Month == 8]
airquality_tb[airquality_df$Month == 8]
airquality_tb[airquality_tb$Month == 8]
airquality_tb[airquality_tb$Month == 8,]
airquality_tb[airquality_tb != c(7,8)]
airquality_tb[airquality_tb != c(7,8),]
airquality_tb
airquality_tb[!(airquality_tb$Month == 7 | airquality_tb$Month == 8)]
airquality_tb[!(airquality_tb$Month == 7 | airquality_tb$Month == 8),]
airquality_tb[airquality_tb$Month != 7 & airquality_tb$Month == 8,]
airquality_tb[!(airquality_tb$Month == 7 | airquality_tb$Month == 8),]
airquality_tb[airquality_tb$Month != 7 & airquality_tb$Month == 8,]
airquality_tb[airquality_tb$Month != 7 & airquality_tb$Month == 8,] %>% View()
airquality_tb[airquality_tb$Month != 7 & airquality_tb$Month != 8,]
airquality_tb[!(c(7,8) %in% airquality_tb$Month)]
airquality_tb[!(c(7,8) %in% airquality_tb$Month),]
airquality_tb[!(airquality_tb$Month) %in% c(7,8),]
airquality_tb[,c("Ozone", "Temp")]
airquality_tb
# Extract the names of the variables
colnames(starwars)
starwars
library(dplyr)
# Extract the names of the variables
colnames(starwars)
# Replace the column height (which is in cm) by the height in meters
starwars$height <- starwars$height / 100
# Filter the human characters
starwars_filter <- starwars[starwars$species == "Human" &
!is.na(starwars$species),]
starwars_filter$BMI <- starwars_filter$mass / (starwars_filter$height^2)
if(
starwars_filter$height[starwars_filter$sex == "male" &
!is.na(starwars_filter$sex) &
!is.na(starwars_filter$height)] %>% mean()
>
starwars_filter$height[starwars_filter$sex == "female" &
!is.na(starwars_filter$sex) &
!is.na(starwars_filter$height)] %>% mean()) {
print("Males are taller")
} else {
print("Females are taller (or males and females have the same height)")
}
q()
q()
# we want to create a new variable called under_18
# the variables is Boolean: TRUE if the person is under 18, FALSE
# if not
starwars$under_18 <- starwars$birth_year < 18
# we want to create a new variable called under_18
# the variables is Boolean: TRUE if the person is under 18, FALSE
# if not
starwars$under_18 <- starwars$birth_year < 18
starwars[starwars$under_18,]
# we want to create a new variable called under_18
# the variables is Boolean: TRUE if the person is under 18, FALSE
# if not
starwars$under_18 <- starwars$birth_year < 18
starwars[starwars$under_18,]
# now we want to create a new variable age (text instead of Boolean)
# "under_18" if birth_year < 18
# "over_18" if not
if(starwars$birth_year < 18) {
starwars$age <- "under_18"
} else {
starwars$age <- "over_18"
}
q()
q()
R.version.string
library(rsconnect)
rsconnect::deployApp('/Users/marvin-julianstruckmeyer/Tertium_Werkstudium/SAA_Dashboard')
remove.packages("bslib")
install.packages("bslib")
getwd()
getwd()
q()
getwd()
setwd("/Users/marvin-julianstruckmeyer/Data_Programming_Group_Project")
getwd()
writeLines("This folder contains raw data files", "data/raw/README.md")
writeLines("This folder contains processed/cleaned data files", "data/processed/README.md")
gert::git_add(".")
gert::git_commit("Add data folder structure")
gert::git_push()
getwd()
list.files("data/raw")
gert::git_add("data/raw/")
gert::git_commit("Add raw data files for analysis")
gert::git_push()
getwd()
#| messsages: false
#| warning: false
library(tidyverse)
#| messsages: false
#| warning: false
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
getwd()
setwd("/Users/marvin-julianstruckmeyer/Data_Programming_Group_Project")
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
cod_mun <- read_csv("data/raw/cod_mun.csv")
surveys <- read_csv("data/raw/historical_surveys.csv")
abbrev <- read_csv("data/raw/siglas.csv")
getwd()
writeLines(readLines("/Users/marvin-julianstruckmeyer/Downloads/Data Cleaning.qmd"), "R/00_data_cleaning.qmd")
gert::git_add("R/00_data_cleaning.qmd")
gert::git_commit("Add data cleaning Quarto document")
gert::git_push()
#| messsages: false
#| warning: false
library(tidyverse)
#| messsages: false
#| warning: false
library(tidyverse)
#| messsages: false
#| warning: false
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
setwd("/Users/marvin-julianstruckmeyer/Data_Programming_Group_Project/data/raw")
#| messsages: false
#| warning: false
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
getwd()
setwd("/Users/marvin-julianstruckmeyer/Data_Programming_Group_Project")
getwd()
#| messsages: false
#| warning: false
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
surveys <- read_csv("data/raw/historical_surveys.csv")
abbrev <- read_csv("data/raw/siglas.csv")
election_data <- election_data |>
pivot_longer(cols = -(tipo_eleccion:votos_candidaturas),
names_to = "partido",
values_to = "num_votos")
election_data <- election_data |>
select(-tipo_eleccion)
election_data <- election_data |>
mutate(
partido_2 = case_when(
str_detect(partido, "CIUDADANOS[-,]? PARTIDO DE LA CIUDADANÍA") ~ "CIUDADANOS",
str_detect(partido, "PSOE|PARTIDO SOCIALISTA") ~ "PSOE",
str_detect(partido, "PARTIDO POPULAR") ~ "PARTIDO POPULAR",
partido == "PARTIDO NACIONALISTA VASCO" ~ "PARTIDO NACIONALISTA VASCO",
partido == "BLOQUE NACIONALISTA GALLEGO" ~ "BLOQUE NACIONALISTA GALLEGO",
partido == "CONVERGÈNCIA I UNIÓ" ~ "CONVERGÈNCIA I UNIÓ",
partido == "UNIDAS PODEMOS - IU" ~ "UNIDAS PODEMOS-IU",
partido == "ESQUERRA REPUBLICANA DE CATALUNYA" ~ "ESQUERRA REPUBLICANA DE CATALUNYA",
str_detect(partido, "BILDU") ~ "EH-BILDU",
str_detect(partido, "MÁS PAÍS") ~ "MÁS PAÍS",
partido == "VOX" ~ "VOX",
TRUE ~ "OTHER"))
gert::git_add("R/00_data_cleaning.qmd")
gert::git_commit("Added the export of the cleaned data to data/processed")
gert::git_push()
gert::git_add(".")
gert::git_commit("Added the export of the cleaned data to data/processed")
gert::git_push()
gert:git_status()
gert::git_status()
getwd()
list.files("R")
gert::git_status()
#| messsages: false
#| warning: false
library(tidyverse)
#| messsages: false
#| warning: false
library(tidyverse)
getwd()
#| messsages: false
#| warning: false
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
election_data <- read_csv("data/raw/datos_elecciones_brutos.csv")
cod_mun <- read_csv("data/raw/cod_mun.csv")
surveys <- read_csv("data/raw/historical_surveys.csv")
abbrev <- read_csv("data/raw/siglas.csv")
election_data <- election_data |>
pivot_longer(cols = -(tipo_eleccion:votos_candidaturas),
names_to = "partido",
values_to = "num_votos")
election_data <- election_data |>
select(-tipo_eleccion)
election_data <- election_data |>
mutate(
partido_2 = case_when(
str_detect(partido, "CIUDADANOS[-,]? PARTIDO DE LA CIUDADANÍA") ~ "CIUDADANOS",
str_detect(partido, "PSOE|PARTIDO SOCIALISTA") ~ "PSOE",
str_detect(partido, "PARTIDO POPULAR") ~ "PARTIDO POPULAR",
partido == "PARTIDO NACIONALISTA VASCO" ~ "PARTIDO NACIONALISTA VASCO",
partido == "BLOQUE NACIONALISTA GALLEGO" ~ "BLOQUE NACIONALISTA GALLEGO",
partido == "CONVERGÈNCIA I UNIÓ" ~ "CONVERGÈNCIA I UNIÓ",
partido == "UNIDAS PODEMOS - IU" ~ "UNIDAS PODEMOS-IU",
partido == "ESQUERRA REPUBLICANA DE CATALUNYA" ~ "ESQUERRA REPUBLICANA DE CATALUNYA",
str_detect(partido, "BILDU") ~ "EH-BILDU",
str_detect(partido, "MÁS PAÍS") ~ "MÁS PAÍS",
partido == "VOX" ~ "VOX",
TRUE ~ "OTHER"
)
)
surveys <- surveys |>
pivot_longer(cols = -(type_survey:turnout),
names_to = "party_name",
values_to = "vote_intention")
surveys <- surveys |>
select(-type_survey)
# I create a new variable called fieldwork_days:
surveys <- surveys |>
mutate(fieldwork_days = as.numeric(field_date_to - field_date_from)) |>
relocate(fieldwork_days, .after = field_date_to)
# I filter according to the instructions:
surveys <- surveys |>
filter(date_elec >= as.Date("2008-01-01"),
size >= 750,
!is.na(size),
fieldwork_days > 1,
exit_poll == FALSE)
saveRDS(election_data, "data/processed/election_data.rds")
saveRDS(election_data, "data/processed/election_data.rds")
saveRDS(surveys, "data/processed/surveys.rds")
gert::git_status()
gert::git_add(".")
gert::git_commit("Add cleaned datasets and update cleaning script")
gert::git_push()
gert::git_rm("R/00_data_cleaning.R")
gert::git_commit("Remove obsolete R script, replaced by Quarto document")
gert::git_push()
gert::git_rm("group", recursive = TRUE)
gert::git_rm("group")
gert::git_rm(".RData")
gert::git_rm(".Rhistory")
gert::git_rm(".Rproj.user", recursive = TRUE)
gert::git_rm(".Rproj.user")
gert::git_rm("Group_Assignment_Script.R")
gert::git_rm("group.Rproj")
gert::git_rm("group.html")
gert::git_rm("group.qmd")
gert::git_rm("style.scss")
gert::git_rm("election_data_short.csv")
gert::git_commit("Clean up repository by removing unnecessary files and folders")
gert::git_push()
