datos <- readr::read_csv(file = "../../../docencia-R-datascience-2324/entregas/ENTREGA 3 BIS/datos_elecciones_brutos.csv")
datos_tidy <- datos |>
+1s
library(tidyverse)
table4a
datos
datos_tidy <- datos |> pivot_longer(cols = -(tipo_eleccion:votos_candidaturas), names_to = "partido", values_to = "votos", values_drop_na = TRUE)
datos_tidy
datos_tidy |> filter(partido == "PARTIDO POPULAR")
datos_tidy |> filter(str_detect(partido, "PARTIDO POPULAR"))
datos_tidy |> filter(str_detect(partido, "PARTIDO POPULAR")) |> select(partido, votos)
datos_tidy |> filter(str_detect(partido, "PARTIDO POPULAR")) |> select(partido, votos) arrange(desc(partido))
datos_tidy |> filter(str_detect(partido, "PARTIDO POPULAR")) |> select(partido, votos) |>  arrange(desc(partido))
datos_tidy |> filter(str_detect(partido, "PARTIDO NACIONALISTA VASCO")) |> select(partido, votos) |>  arrange(desc(partido))
cod_mun <- read_csv(file = "../../../docencia-R-datascience-2324/entregas/ENTREGA 3 BIS/cod_mun.csv")
cod_mun
datos_tidy |> summarise(across(where(is.numeric), mean))
rm(list = ls())
library(tidyverse)
election_data <- read_csv(file = "./data/datos_elecciones_brutos.csv")
election_data %>% dim()
election_Data %>% glimpse()
election_data %>% glimpse()
election_data %>% is.na() %>% sum()
dim(election_data)[1] * dim(election_data)[2]
(election_data %>% is.na() %>% sum()) / dim(election_data)[1] * dim(election_data)[2]
(election_data %>% is.na() %>% sum()) / (dim(election_data)[1] * dim(election_data)[2])
cod_mun <- read_csv(file = "./data/cod_mun.csv")
cod_mun %>% View()
surveys <- read_csv(file = "./data/historical_surveys.csv")
abbrev <- read_csv(file = "./data/siglas.csv")
abbrev %>% View()
surveys
colnames(surveys)
surveys$type_survey %>% unique()
surveys$type_survey
surveys$field_date_from %>% sort(decreasing = T)
surveys$field_date_from %>% sort(decreasing = T) %>% head(10)
election_data$anno %>% sort(decreasing = T) %>% head(10)
abbrev %>% View()
cod_mun
surveys %>% dim()
install.packages("DBI")
install.packages("DBI")
install.packages("RSQLite")
# reduce size of data objects to be able to upload them to the Claude project
election_data_short <- election_data[1:(nrow(election_data) * 0.3),]
write.csv(election_data_short, "election_data_short.csv")
election_data_short %>% dim()
library(magrittr)
election_data_short %>% dim()
write.csv(election_data_short, "election_data_short.csv")
getwd()
election_data_short <- election_data[1:(nrow(election_data) * 0.35),]
write.csv(election_data_short, "election_data_short.csv")
election_data_short <- election_data[1:(nrow(election_data) * 0.4),]
write.csv(election_data_short, "election_data_short.csv")
glimpse(election_data)
library(tidyverse)
glimpse(election_data)
# Clean historical surveys
surveys_clean <- surveys %>%
# Convert date columns to proper date format
mutate(
date_elec = as.Date(date_elec),
field_date_from = as.Date(field_date_from),
field_date_to = as.Date(field_date_to)
) %>%
# Calculate fieldwork days
mutate(
fieldwork_days = as.numeric(field_date_to - field_date_from)
) %>%
# Apply all filtering conditions
filter(
# Elections from 2018 onwards
date_elec >= as.Date("2018-01-01"),
# Not exit polls
!exit_poll,
# Sample size >= 750 and not unknown (NA)
!is.na(size) & size >= 750,
# More than 1 day of fieldwork
fieldwork_days > 1
)
# Print summary to check the results
summary(surveys_clean)
dim(surveys_clean)
dim(surveys)
clean_surveys %>% View()
surveys_clean %>% View()
clean_surveys %>% colnames()
surveys_clean %>% colnames()
surveys %>% colnames()
# Each team member should install these R packages
install.packages(c("usethis", "gitcreds", "gert"))
getwd()
election_data <- readRDS("R/data/processed/election_data.rds")
getwd()
setwd("Users/marvin-julianstruckmeyer/Data_Programming_Group_Project")
setwd("Users/marvin-julianstruckmeyer/Data_Programming_Group_Project/R")
q()
getwd()
setwd("/Users/marvin-julianstruckmeyer/Data_Programming_Group_Project")
getwd()
election_data <- readRDS("R/data/processed/election_data.rds")
View(election_data)
election_data <- readRDS("R/data/processed/election_data.rds")
View(election_data)
election_data$codigo_ccaa %>% unique()
library(tidyverse)
library(magrittr)
election_data$codigo_ccaa %>% unique()
election_data$codigo_provincia %>% unique() %>% length()
write.csv(election_data, "election_data_cleaned.csv")
write.csv(election_data, "election_data_cleaned.csv")
election_data %>% View()
election_data %>% dim()
election_data[1:10000,] %>% write.csv("election_data_cleaned.csv")
surveys <- readRDS("R/data/processed/surveys.rds")
election_data <- election_data |>
mutate(
turnout = ((votos_blancos + votos_nulos + votos_candidaturas) / censo) * 100,
# Identify extreme parties
party_type = case_when(
partido_2 %in% c("VOX") ~ "far_right",
partido_2 %in% c("UNIDAS PODEMOS - IU") ~ "far_left",
TRUE ~ "other"))
election_data %>% View()
extreme_party_share <- election_data |>
group_by(anno, mes, municipio, party_type) |>
summarise(
total_votes = sum(num_votos),
turnout = first(turnout)) |>
pivot_wider(
names_from = party_type,
values_from = total_votes,
values_fill = 0) |>
mutate(
far_right_share = (far_right / (far_right + far_left + other)) * 100,
far_left_share = (far_left / (far_right + far_left + other)) * 100)
election_data %>% View()
extreme_party_share %>% dim()
extreme_party_share %>% View()
extreme_party_share$far_left %>% is.na() %>% sum()
election_data[c(1,2,3,4,5),] %>% View()
# Check unique party names
election_data %>%
select(partido_2) %>%
distinct() %>%
arrange(partido_2)
party_classification <- election_data_cleaned %>%
select(partido_2) %>%
distinct() %>%
mutate(
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
)
)
party_classification <- election_data %>%
select(partido_2) %>%
distinct() %>%
mutate(
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
)
)
print(party_classification)
election_data<- election_data %>%
mutate(
turnout = ((votos_blancos + votos_nulos + votos_candidaturas) / censo) * 100,
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
)
)
extreme_party_share <- election_data %>%
# Group by election and municipality
group_by(anno, mes, municipio) %>%
# Calculate total valid votes for denominator
mutate(total_valid_votes = sum(num_votos)) %>%
# Calculate shares
group_by(anno, mes, municipio, party_type) %>%
summarise(
votes = sum(num_votos),
turnout = first(turnout),
total_votes = first(total_valid_votes),
.groups = 'drop'
) %>%
# Convert to wide format
pivot_wider(
names_from = party_type,
values_from = votes,
values_fill = 0  # Replace NAs with 0 for municipalities where party didn't run
) %>%
# Calculate percentages
mutate(
far_right_share = (far_right / total_votes) * 100,
far_left_share = (far_left / total_votes) * 100,
other_share = (other / total_votes) * 100
)
# Check results
summary(extreme_party_share)
extreme_party_share_2019 <- election_data %>%
# Filter for 2019
filter(anno == 2019) %>%
# Calculate turnout and classify parties
group_by(municipio) %>%
mutate(
turnout = ((votos_blancos + votos_nulos + votos_candidaturas) / censo) * 100,
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
),
total_votes = sum(num_votos)
) %>%
# Calculate votes by party type
group_by(municipio, party_type) %>%
summarise(
party_votes = sum(num_votos),
turnout = first(turnout),
total_votes = first(total_votes),
.groups = 'drop'
) %>%
# Calculate vote shares
mutate(vote_share = (party_votes / total_votes) * 100)
# Create visualization
ggplot(
extreme_party_share_2019 %>% filter(party_type != "other"),
aes(x = turnout, y = vote_share, color = party_type)
) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm") +
scale_color_manual(
values = c("far_right" = "red", "far_left" = "purple"),
labels = c("VOX", "UNIDAS PODEMOS - IU")
) +
labs(
title = "Relationship between Turnout and Extreme Party Vote Share (2019)",
x = "Turnout (%)",
y = "Vote Share (%)",
color = "Party"
) +
theme_minimal()
# Calculate correlations
extreme_party_share_2019 %>%
filter(party_type != "other") %>%
group_by(party_type) %>%
summarise(
correlation = cor(turnout, vote_share, use = "complete.obs"),
mean_vote_share = mean(vote_share, na.rm = TRUE),
median_vote_share = median(vote_share, na.rm = TRUE))
# First, let's check what parties we have in 2019
election_data_cleaned %>%
filter(anno == 2019) %>%
select(partido_2) %>%
distinct()
election_data %>%
filter(anno == 2019) %>%
select(partido_2) %>%
distinct()
# Then let's check our data transformation process with print statements
extreme_party_share_2019 <- election_data %>%
# Filter for 2019
filter(anno == 2019) %>%
# Check how many rows we have
{print(paste("Rows after 2019 filter:", nrow(.))); .} %>%
# Calculate turnout and classify parties
group_by(municipio) %>%
mutate(
turnout = ((votos_blancos + votos_nulos + votos_candidaturas) / censo) * 100,
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
),
total_votes = sum(num_votos)
) %>%
{print(paste("Unique municipalities:", n_distinct(.$municipio))); .} %>%
# Check party distribution
{print(table(.$party_type)); .} %>%
# Continue with the rest of the calculations
group_by(municipio, party_type) %>%
summarise(
party_votes = sum(num_votos),
turnout = first(turnout),
total_votes = first(total_votes),
.groups = 'drop'
)
# Look at the structure of our final data
str(extreme_party_share_2019)
summary(extreme_party_share_2019)
high_turnout_check <- election_data_cleaned %>%
filter(anno == 2019) %>%
group_by(municipio) %>%
summarise(
censo = first(censo),
total_votes = first(votos_blancos + votos_nulos + votos_candidaturas),
turnout = (total_votes / censo) * 100
) %>%
filter(turnout > 100) %>%
arrange(desc(turnout))
high_turnout_check <- election_data %>%
filter(anno == 2019) %>%
group_by(municipio) %>%
summarise(
censo = first(censo),
total_votes = first(votos_blancos + votos_nulos + votos_candidaturas),
turnout = (total_votes / censo) * 100
) %>%
filter(turnout > 100) %>%
arrange(desc(turnout))
# Print the results
print(high_turnout_check)
raw_numbers <- election_data %>%
filter(anno == 2019,
municipio %in% high_turnout_check$municipio) %>%
group_by(municipio) %>%
summarise(
censo = first(censo),
votos_blancos = first(votos_blancos),
votos_nulos = first(votos_nulos),
votos_candidaturas = first(votos_candidaturas)
)
print(raw_numbers)
extreme_party_share_2019 <- election_data %>%
filter(anno == 2019,
municipio != "Alcolea de las Peñas") %>%
group_by(municipio) %>%
mutate(
turnout = ((votos_blancos + votos_nulos + votos_candidaturas) / censo) * 100,
party_type = case_when(
partido_2 == "VOX" ~ "far_right",
partido_2 == "UNIDAS PODEMOS - IU" ~ "far_left",
TRUE ~ "other"
),
total_votes = sum(num_votos)
) %>%
group_by(municipio, party_type) %>%
summarise(
party_votes = sum(num_votos),
turnout = first(turnout),
total_votes = first(total_votes),
.groups = 'drop'
) %>%
mutate(vote_share = (party_votes / total_votes) * 100)
summary(extreme_party_share)
getwd()
election_data <- readRDS("R/data/processed/election_data.rds")
list.files()
q()
gert::git_pull()
q()
